---
- name: Include get-server-version # this sets result
  include_tasks: get-server-version.yml

- name: Print version of Docker server
  debug:
    var: result.stdout

# Check if docker-ce is updatable to conditionally stop kubelet service before update
- name: Check if docker-ce is updatable
  command: >-
    {{ 'yum check-update docker-ce' if ansible_os_family == 'RedHat' else
       'apt list --upgradable docker-ce' if ansible_os_family == 'Debian' else None }}
  args:
    warn: no
  register: check_docker_update
  failed_when: check_docker_update.rc not in [0, 100] # yum check-update returns code 100 if there are packages available for update
  changed_when: false

- name: Set is_docker_updatable fact
  set_fact:
    is_docker_updatable: "{{ check_docker_update.stdout is search('docker-ce') }}"

- name: Stop kubelet before Docker update
  systemd:
    state: stopped
    name: kubelet
  when:
    - is_docker_updatable

# Install Docker in current version - this may restart Docker daemon
- name: Include containerd defauts
  include_vars:
    file: roles/containerd/defaults/main.yml
    name: containerd_defaults

- name: Get information about installed packages as facts
  package_facts:
    manager: auto
  changed_when: false

- name: Set containerd_installed_version fact
  set_fact:
    containerd_installed_version: "{{ ansible_facts.packages['containerd.io'][0].version }}"

- name: Fetch list of packages to install for running distribution
  set_fact:
    docker_packages: "{{ docker_packages[ansible_os_family] }}"

# In Epiphany v1.3 containerd.io is installed as the latest available in the packages repositories, and in Epiphany v2.0
# we specify installed version. In order to avoid downgrade we need to update the packages list.
- name: Update packages list if containerd.io version already satisfied
  set_fact:
    docker_packages: "{{ docker_packages | difference (docker_packages | select('match','containerd.io+')) }}"
  when: containerd_installed_version is version(containerd_defaults.containerd_version, '>')

- name: Install Docker packages
  package:
    name: "{{ docker_packages }}"
    state: present
  module_defaults:
    yum: { lock_timeout: "{{ yum_lock_timeout }}" }

- name: Include configure-docker
  include_tasks: configure-docker.yml

- name: Include get-server-version # this sets result
  include_tasks: get-server-version.yml

- name: Print version of Docker server
  debug:
    var: result.stdout

- name: Start kubelet after Docker update
  systemd:
    state: started
    name: kubelet
    daemon_reload: yes
  when:
    - is_docker_updatable
