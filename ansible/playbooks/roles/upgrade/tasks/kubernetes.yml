---
- name: Wait for kube-apiserver and get cluster version
  delegate_to: "{{ groups.kubernetes_master[0] }}"
  block:
    - name: k8s | Include wait-for-kube-apiserver.yml
      import_tasks: kubernetes/utils/wait-for-kube-apiserver.yml

    - name: k8s | Include get-cluster-version.yml
      import_tasks: kubernetes/get-cluster-version.yml # sets cluster_version

- name: k8s | Include get-kubelet-version.yml
  import_tasks: kubernetes/get-kubelet-version.yml # sets kubelet_version
  delegate_to: "{{ groups.kubernetes_master[0] }}"

- name: Check for upgrade flag file
  stat:
    path: "{{ kubernetes.upgrade_flag_path }}"
  register: lock_file_status

- name: Upgrade masters then nodes
  vars:
    version: "{{ ver }}"
    cni_version: "{{ cni_ver }}"
  block:
    - name: Create upgrade flag file
      file:
        path: "{{ kubernetes.upgrade_flag_path }}"
        state: touch

    - name: Upgrade masters
      block:
        - name: k8s | Upgrade first master to v{{ version }}
          include_tasks: kubernetes/upgrade-master0.yml
          when:
            - inventory_hostname == groups.kubernetes_master[0]

        - name: k8s | Upgrade next master to v{{ version }}
          include_tasks: kubernetes/upgrade-masterN.yml
          when:
            - inventory_hostname in groups.kubernetes_master[1:]

    - name: Upgrade nodes
      block:
        - name: k8s | Upgrade node to v{{ version }}
          include_tasks: kubernetes/upgrade-node.yml
          when:
            - groups.kubernetes_node is defined
            - inventory_hostname in groups.kubernetes_node

    - name: Remove k8s upgrade flag file
      file:
        path: "{{ kubernetes.upgrade_flag_path }}"
        state: absent
  when: >
    lock_file_status.stat.exists or
    cluster_version is version('v' + version, '<') or
    kubelet_version is version('v' + version, '<')

- name: k8s | Upgrade internal haproxy load-balancer
  import_tasks: kubernetes/upgrade-haproxy.yml
